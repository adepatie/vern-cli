#!/usr/bin/env node

var program          = require('nomnom'),
    os               = require('os'),
    path             = require('path'),
    fs               = require('fs-extra'),
    spawn            = require('child_process').spawn,
    fork             = require('child_process').fork,
    inquirer         = require('inquirer'),
    colors           = require('colors'),
    validator        = require('validator'),
    watchr           = require('watchr'),
    template_dir     = path.resolve(__dirname, '..', 'templates'),
    _project         = require(path.join(template_dir, 'project')),
    _container       = require(path.join(template_dir, 'container')),
    _controller      = require(path.join(template_dir, 'controller')),
    _model           = require(path.join(template_dir, 'model')),
    _directive       = require(path.join(template_dir, 'directive')),
    _service         = require(path.join(template_dir, 'service')),
    _filter          = require(path.join(template_dir, 'filter')),
    _route           = require(path.join(template_dir, 'route')),
    _view            = require(path.join(template_dir, 'view')),
    _view_controller = require(path.join(template_dir, 'view_controller')),
    _stylesheet      = require(path.join(template_dir, 'stylesheet')),
    _module          = require(path.join(template_dir, 'module')),
    utils            = require(path.join(__dirname, '..', 'utils')),
    default_config   = require(path.join(template_dir, 'vern_config.json')),
    default_mconfig  = require(path.join(template_dir, 'vern_module_config.json')),
    pkg              = require(path.join(__dirname, '..', 'package.json')),
    util             = require('util'),
    allDefault       = false;

if(process.argv.length <= 2) {
  return console.log('No command given, ' + 'vern -h'.green + ' for usage');
}

function safeSpawn(command, params, options) {
  var proc = null;
  var platform = os.platform();
  if(platform.indexOf('win') === 0) { // if windows, win32, win64, but not darwin
    proc = spawn(process.env.comspec, [].concat(['/c'], [command], params), options);
  } else {
    proc = spawn(command, params, options);
  }

  return proc;
}

program.script('vern');
program.option('version', {
    abbr: 'v',
    flag: true,
    help: 'print version and exit',
    callback: function() {
      return "VERN CLI version " + pkg.version;
    }
  });
program.option('model', {help: 'Create a controller with specified model. Does not create the model.'});
program.option('use-factory', {flag: true, help: 'Create service as a factory'});
program.option('use-provider', {flag: true, help: 'Create service as a provider'});
program.option('partial', {flag: true, help: 'Create view as a partial'});
program.option('modal', {flag: true, help: 'Create service as a modal'});
program.option('no-install', {flag: true, help: 'Start server without performing installs'});
program.option('path', {flag: true, help: 'Define path for routes and views'});
program.option('y', {flag: true, help: 'Answer all questions with the default', callback: function() { allDefault = true; }});
program.option('type', {abbr: 't', help: 'Type of module/view/etc, used in multiple commands'});
program.command('create').callback(parseCreate).help('Create a new component (controller, model, route, view, view_controller, stylesheet, directive, service, or filter) or project or module');
program.command('start').callback(parseStart).help('Start a server module (api, public, admin, all)');
program.command('stop').callback(parseStop).help('Stop a server module');
program.command('restart').callback(parseRestart).help('Restart a server module');
program.command('install').callback(parseInstall).help('Install a module to your project');
program.command('uninstall').callback(parseUninstall).help('Uninstall a module from your project');
program.command('build').callback(parseBuild).help('Build environment for distribution (default public)');
program.command('package').callback(parsePackage).help('Start the package builder');
program.command('deploy').callback(parseDeploy).help('Perform deployment commands, vern deploy setup to initialize');
program.command('config').callback(parseConfig).help('Configure your application options');
program.command('module').callback(parseModule).help('Create a vern module');
program.parse();

/*
 *
 * Starter functions
 *
 * These methods will start the api, admin, and public servers for development
 *
 * For a production deployment the process is different, but could be very similar
 *
 */
function parseStart() {
  var i = process.argv.indexOf('start');
  var params = process.argv.slice(i + 1);

  var installs = true;
  if(params.indexOf('--no-install') > -1) {
    installs = false;
  }

  var server = params[0];

  switch(server) {
    case 'api':
      new Starter().startAPI(installs);
      break;
    case 'public':
      new Starter().startPublic(installs);
      break;
    case 'admin':
      new Starter().startAdmin(installs);
      break;
    default:
    case 'all':
      new Starter().startAPI(installs, function() {
        new Starter().startPublic(installs, function () {
          new Starter().startAdmin(installs);
        });
      });
      break;
  }
}

/*
 *
 * Stop servers
 *
 * TODO
 *
 */
function parseStop() {
  var i = process.argv.indexOf('stop');
  var params = process.argv.slice(i + 1);

  var installs = true;
  if(params.indexOf('--no-install') > -1) {
    installs = false;
  }

  var server = params[0];

  switch(server) {
    case 'api':

      break;
    case 'public':

      break;
    case 'admin':

      break;
  }
}

/*
 *
 * Restart servers
 *
 * TODO
 *
 */
function parseRestart() {
  var i = process.argv.indexOf('restart');
  var params = process.argv.slice(i + 1);

  var installs = true;
  if(params.indexOf('--no-install') > -1) {
    installs = false;
  }

  var server = params[0];

  switch(server) {
    case 'api':

      break;
    case 'public':

      break;
    case 'admin':

      break;
  }
}

function Starter(options) {
  var $scope = this;
  var restarting = false;

  if(!options) {
    options = {};
  }

  $scope.processes = {
    vern: null,
    admin: null,
    public: null
  };

  var projectConfig = new Builds().loadProjectConfig(options.cwd);
  if(!projectConfig) return;

  var project_dirs = {
    vern: path.join('app', projectConfig.options.folders.api),
    admin: path.join('app', projectConfig.options.folders.admin),
    assets: path.join('app', projectConfig.options.folders.assets),
    public: path.join('app', projectConfig.options.folders.public)
  };

  process.on('exit', function(code) {
    if($scope.processes.vern) {
      $scope.processes.vern.kill();
    }

    if($scope.processes.admin) {
      $scope.processes.admin.kill();
    }

    if($scope.processes.public) {
      $scope.processes.public.kill();
    }
  });

  var cwd = options.cwd || projectConfig.cwd;
  var watching = false;

  $scope.handleRunner = function(task, runner, callback) {
    runner.on('close', function(code) {
      if(code === 0) {
        callback(null, task + ' successful'.green);
      } else {
        callback(task + ' exited with '.red + code.red, null)
      }
    });

    runner.on('error', function(message) {
      console.log(message);
    });
  };

  $scope.runNpm = function(cmd_path, callback) {
    console.log('running npm in ' + cmd_path);
    var runner = safeSpawn('npm', ['install'], {
      cwd: cmd_path,
      stdio: 'inherit'
    });
    $scope.handleRunner('npm install in ' + cmd_path, runner, function(err, success) {
      if (err) {
        return callback(err);
      }

      return callback(null, success);
    });
  };

  $scope.runBower = function(cmd_path, callback) {
    console.log('running bower in ' + cmd_path);
    var runner = safeSpawn('bower', ['install'], {
      cwd: cmd_path,
      stdio: 'inherit'
    });
    $scope.handleRunner('bower install in ' + cmd_path, runner, function(err, success) {
      if (err) {
        return callback(err);
      }

      return callback(null, success);
    });
  };

  $scope.vernExec = function(opts) {
    var env = opts.env || 'development';
    var project = opts.project || 'vern';

    $scope.processes[project] = safeSpawn('node', ['server', '-e', env], {
      cwd: path.join(cwd, project_dirs[project]),
      stdio: 'pipe'
    });

    console.log('');
    console.log('starting ' + project.green + ' with PID ' + $scope.processes[project].pid.toString().green + ' ...');
    console.log('');

    $scope.processes[project].stdout.on('data', function(data) {
      var str = data.toString().split('\n');
      for(var i = 0; i < str.length; i++) {
        if(str[i].length <= 0) {
          continue;
        }
        process.stdout.write(project + ': ' + str[i] + '\n');
      }
    });
    $scope.processes[project].stderr.on('data', function(data) {
      var str = data.toString().split('\n');
      for(var i = 0; i < str.length; i++) {
        if(str[i].length <= 0) {
          continue;
        }
        process.stdout.write(project + ': ERROR: ' + str[i] + '\n');
      }
    });
    $scope.processes[project].on('error', function() {
      console.dir(arguments);
    });

    if(watching) {
      return;
    }

    var watchPath = path.join(cwd, project_dirs[project]);

    watchr.watch({path: watchPath, ignorePaths: [path.join(watchPath, 'node_modules')], listeners: {change: function(event, filename, stat, prevstat) {
      if(!filename) {
        console.log('vern: ' + event + ' occurred but filename was not provided.');
      }
      if(filename) {
        console.log('vern: ' + path.join(watchPath, filename).green + ' was ' + (event + 'd').green);
        var ext = filename.split('.').pop();
        if(['js', 'json', 'coffee'].indexOf(ext) <= -1) {
          return console.log('vern: not restarting');
        }
      }

      if(restarting) {
        return console.log('server is already restarting');
      }

      restarting = true;
      var npm_install = false;
      if(filename && filename === 'package.json') {
        npm_install = true;
      }
      $scope.processes.vern.kill();
      $scope.startAPI(npm_install, function() {
        console.log('vern: API Server restarting');
        restarting = false;
      });
    }},
    next: function(err, watchers) {
      console.log('watching ' + watchPath.green);
      watching = true;
    }});
  };

  $scope.gruntExec = function(opts) {
    var project = opts.project || 'public';

    $scope.processes[project] = safeSpawn('grunt', ['serve'], {
      cwd: path.join(cwd, project_dirs[project]),
      stdio: 'pipe'
    });

    console.log('');
    console.log('starting ' + project.green + ' with PID ' + $scope.processes[project].pid.toString().green + ' ...');
    console.log('');

    $scope.processes[project].stdout.on('data', function(data) {
      var str = data.toString().split('\n');
      for(var i = 0; i < str.length; i++) {
        if(str[i].length <= 0) {
          continue;
        }
        process.stdout.write(project + ': ' + str[i] + '\n');
      }
    });
    $scope.processes[project].stderr.on('data', function(data) {
      var str = data.toString().split('\n');
      for(var i = 0; i < str.length; i++) {
        if(str[i].length <= 0) {
          continue;
        }
        process.stdout.write(project + ': ERROR ' + str[i] + '\n');
      }
    });
  };

  $scope.startAPI = function(install, nostart, callback) {
    if(arguments.length === 1 && typeof arguments[0] === 'function') {
      callback = arguments[0];
    }
    if(arguments.length === 2 && typeof arguments[1] === 'function') {
      callback = arguments[1];
    }
    if(install === true) {
      $scope.runNpm(path.join(cwd, project_dirs['vern']), function(err, success) {
        if(err) {
          return console.log(err);
        }
        console.log(success);

        if(nostart !== true) {
          $scope.vernExec({project: 'vern', env: 'development'});
        }
        if(callback) {
          callback(null, 'api started');
        }
      });
    } else {
      $scope.vernExec({project: 'vern', env: 'development'});
      if(callback) {
        callback(null, 'api started');
      }
    }
  };

  $scope.startPublic = function(install, nostart, callback) {
    if(arguments.length === 1 && typeof arguments[0] === 'function') {
      callback = arguments[0];
    }
    if(arguments.length === 2 && typeof arguments[1] === 'function') {
      callback = arguments[1];
    }
    if(install === true) {
      $scope.runNpm(path.join(cwd, project_dirs['public']), function(err, success) {
        if(err) {
          return console.log(err);
        }

        console.log(success);
        console.log('');
        $scope.runBower(path.join(cwd, project_dirs['public']), function(err, success) {
          if(err) {
            return console.log(err);
          }

          console.log(success);
          if(nostart !== true) {
            $scope.gruntExec({project: 'public'});
          }
          if(callback) {
            callback(null, 'api started');
          }
        });
      });
    } else {
      $scope.gruntExec({project: 'public'});
      if(callback) {
        callback(null, 'api started');
      }
    }
  };

  $scope.startAdmin = function(install, nostart, callback) {
    if(arguments.length === 1 && typeof arguments[0] === 'function') {
      callback = arguments[0];
    }
    if(arguments.length === 2 && typeof arguments[1] === 'function') {
      callback = arguments[1];
    }
    if(install === true) {
      $scope.runNpm(path.join(cwd, project_dirs['admin']), function(err, success) {
        if(err) {
          return console.log(err);
        }

        console.log(success);
        console.log('');
        $scope.runBower(path.join(cwd, project_dirs['admin']), function(err, success) {
          if(err) {
            return console.log(err);
          }

          console.log(success);
          if(nostart !== true) {
            $scope.gruntExec({project: 'admin'});
          }
          if(callback) {
            callback(null, 'api started');
          }
        });
      });
    } else {
      $scope.gruntExec({project: 'admin'});
      if(callback) {
        callback(null, 'api started');
      }
    }
  };

  return $scope;
}

/*
 *
 * Build functions
 *
 * These create the necessary templates and configurations for each type of component
 *
 * PROJECT LEVEL
 * ===
 * Project - Set up a complete vern structure
 * Container - Set up a container to be packaged and installed in projects (needs more explanation)
 *
 * API/BACKEND LEVEL
 * ===
 * Controller - Set up a vern route/data controller
 * Model - Set up a vern data model
 *
 * ANGULAR LEVEL (specify admin or public)
 * ===
 * View - Sets up an angular view + stylesheet + controller
 * Directive - Sets up an angular directive
 * Service - Sets up an angular service
 * Filter - Sets up an angular filter
 *
 */

function parseCreate(args) {
  var i = process.argv.indexOf('create');
  var params = process.argv.slice(i + 1);

  for(var j = 0; j < params.length; j++) {
    if(!params[j].length) {
      params.splice(j, 1);
      j--;
      continue;
    }
    if(params[j].charAt(0) === '-' && j < params.length-1) {
      params.push(params[j]);
      params.splice(j, 1);
      j--;
      continue;
    }
  }
  var buildName = params[0];
  buildName = utils.toCamelCase(buildName);
  new Builds()['build' + buildName](params.slice(1), args);
}

function Builds() {
  var $scope = this;

  var cwd = process.cwd();

  $scope.loadProjectConfig = function(project_path) {
    if(!project_path) {
      project_path = cwd;
    }

    var done = false;

    while(!done) {
      if (fs.existsSync(path.join(project_path, 'vern.json'))) {
        cwd = project_path;
        var options = require(path.join(project_path, 'vern.json'));
        options = $scope.ensureOptions(options);
        fs.outputJsonSync(path.join(project_path, 'vern.json'), options);
        return {options: options, cwd: project_path};
      }
      if(path.dirname(project_path) === path.sep) {
        done = true;
        continue;
      }
      project_path = path.dirname(project_path);
    }

    console.log('');
    console.log('No ' + 'vern.json'.red + ' found');
    console.log('');
    return null;
  };

  $scope.saveProjectConfig = function(data, project_path) {
    if(!project_path) {
      project_path = path.join(cwd, 'vern.json');
    }

    return fs.outputJsonSync(project_path, data);
  };

  $scope.buildProject = function(options) {
    var project_path = options[0];
    var project = null;

    if(!project_path) {
      inquirer.prompt([
        {
          type: 'input',
          name: 'project',
          message: 'Enter a project name (use . for current directory)',
          default: '.'
        }
      ], function(answers) {
        var project_name = answers.project.length ? answers.project : '.';
        build(project_name, project_name);
      });
    } else {
      build(project_path, project);
    }

    function build(project_path, project) {
      if(project_path === '.') {
        project = cwd.split(path.sep).pop();
        project_path = cwd;
        project = utils.toCamelCase(project);
      } else {
        project = project_path.split(path.sep).pop();
        project_path = path.join(cwd, utils.toHyphenated(project_path));
        project = utils.toCamelCase(project);
      }
      default_config.module = project;

      var params = {
        path: project_path,
        projectName: project,
        appName: project + 'App',
        adminAppName: project + 'AdminApp',
        apiName: 'vern',
        adminName: 'vern_admin',
        assetsName: 'vern_assets',
        publicName: 'vern_public',
        dbName: utils.toHyphenated(project)
      };

      inquirer.prompt([
        {
          type: 'confirm',
          name: 'customize',
          message: 'Do you want to customize your project folders?',
          default: false,
          when: function() {
            return !allDefault;
          }
        },
        {
          type: 'input',
          name: 'default_admin',
          message: 'Enter an email address for your administrator',
          default: 'admin@vern.io',
          validate: function(input) {
            return validator.isEmail(input);
          },
          when: function() {
            return !allDefault;
          }
        },
        {
          type: 'password',
          name: 'default_password',
          default: 'Randomly Generated',
          message: 'Enter a password for your administrator',
          validate: function(input) {
            return input.length > 6;
          },
          when: function() {
            return !allDefault;
          }
        }
      ], function(answers) {
        params.defaultAdmin = answers.default_admin;
        if(answers.default_password === 'Randomly Generated') {
          params.defaultPassword = utils.generatePassword();
        } else {
          params.defaultPassword = answers.default_password;
        }

        if(answers.customize === true) {
          inquirer.prompt([
            {
              type: 'input',
              name: 'api_name',
              message: 'Name your API server',
              default: 'vern'
            },
            {
              type: 'input',
              name: 'admin_name',
              message: 'Name your Admin web portal',
              default: 'vern_admin'
            },
            {
              type: 'input',
              name: 'assets_name',
              message: 'Name your Assets directory',
              default: 'vern_assets'
            },
            {
              type: 'input',
              name: 'public_name',
              message: 'Name your public',
              default: 'vern_public'
            }
          ], function (answers) {
            params.projectName = project;
            params.appName = project + 'App';
            params.adminAppName = project + 'AdminApp';
            params.apiName = utils.toHyphenated(answers.api_name);
            params.adminName = utils.toHyphenated(answers.admin_name);
            params.assetsName = utils.toHyphenated(answers.assets_name);
            params.publicName = utils.toHyphenated(answers.public_name);

            console.log('Setting up ' + project.green + ' now!');
            if ((fs.existsSync(project_path) && project_path !== '.') || (project_path === '.' && fs.readdirSync(project_path).length > 0)) {
              inquirer.prompt({
                type: 'confirm',
                name: 'overwrite',
                message: 'Overwrite the existing directory?',
                default: false
              }, function (answers) {
                if (answers.overwrite === true) {
                  copyProject(project_path, params);
                } else {
                  console.log('Not going to overwrite. Good bye!'.red);
                }
              });
            } else {
              copyProject(project_path, params);
            }
          });
        } else {
          copyProject(project_path, params);
        }
      });
    }
  };

  function copyProject(project_path, params) {
    console.log('Trying to create project in: ' + project_path.green);
    default_config.folders.api = params.apiName;
    default_config.folders.admin = params.adminName;
    default_config.folders.assets = params.assetsName;
    default_config.folders.public = params.publicName;
    default_config.vern_version = pkg.version;
    _project.copy(params, function(err, res) {
      if(err) {
        console.log('');
        console.log(err);
        return;
      }

      console.log(res.green);

      if(!fs.existsSync(path.join(project_path, 'app', params.apiName, 'vern_config.js'))) {
        fs.copySync(path.join(project_path, 'app', params.apiName, 'vern_config.sample.js')
          , path.join(project_path, 'app', params.apiName, 'vern_config.js'));
      }

      fs.outputJson(path.join(project_path, 'vern.json'), default_config, function(err) {
        if(err) {
          return console.log(err);
        }

        console.log('Created ' + path.join(project_path, 'vern.json').green);
        // Now we will prompt the user to start adding base routes, controllers, and models.
        // We can also setup a deployment strategy(ies)
        inquirer.prompt({
          type: 'confirm',
          name: 'install',
          message: 'Would you like to install all dependencies now? It will take a few minutes.',
          default: false,
          when: function() {
            return !allDefault;
          }
        }, function(answers) {
          if(answers.install === true) {
            var newCWD = path.join(cwd, project_path);
            console.log(newCWD);
            new Starter({cwd: newCWD}).startAPI(true, true, function(err, success) {
              if(err) {
                return console.log(err);
              }
              new Starter({cwd: newCWD}).startPublic(true, true, function (err, success) {
                if(err) {
                  return console.log(err);
                }
                new Starter({cwd: newCWD}).startAdmin(true, true, function (err, success) {
                  if(err) {
                    return console.log(err);
                  }

                  console.log('');
                  console.log('All servers dependencies installed!');
                  console.log('');
                });
              });
            });
          } else {
            console.log('');
          }

          console.log('To start servers:');
          console.log('cd '.green + project_path.green + ' && vern start all'.green);
          console.log('');
        });
      });
    });
  }

  $scope.ensureOptions = function(options, starting) {
    if(!starting) {
      starting = default_config;
    }
    for(var i in starting) {
      if(typeof options[i] === 'undefined') {
        options[i] = starting[i];
      }
      if(typeof starting[i] === 'object') {
        options[i] = $scope.ensureOptions(options[i], starting[i]);
      }
    }

    return options;
  };

  $scope.buildContainer = function(options) {
    /**
     * TODO
     */
  };

  $scope.buildController = function(options) {
    var model = null;
    if(options.indexOf('--model') > -1) {
      model = options[options.indexOf('--model') + 1];
    }

    if(!options.length) {
      return console.log('Missing controller name'.red);
    }

    var name = utils.toCamelCase(options[0]);

    if(!model && options.indexOf('--no-model') < 0) {
      inquirer.prompt({
        type: 'confirm',
        name: 'model',
        message: 'Would you like to create ' + name + 'Model?',
        default: true
      }, function(res) {
        if(res.model === true) {
          model = name + 'Model';
          $scope.buildModel([options[0]]);
        }
        finishControllerBuild(options, model);
      });
    } else {
      finishControllerBuild(options, model);
    }
  };

  function finishControllerBuild(options, model) {
    var projectConfig = $scope.loadProjectConfig();
    if(!projectConfig) return;

    var params = {
      name: utils.toCamelCase(options[0]) + 'Controller',
      path: projectConfig.options.type === 'project' ? path.join(projectConfig.cwd, 'app', projectConfig.options.folders.api, 'controllers') : path.join(projectConfig.cwd, 'lib')
    };

    if(model) {
      params.model_declaration = '$scope.model = $vern.models.' + model + ';';
    }

    _controller.copy(params, function(err, success) {
      if(err) {
        return console.log(err);
      }

      utils.rewrite({
        path: projectConfig.options.type === 'project' ? path.join(projectConfig.cwd, 'app', projectConfig.options.folders.api, 'server.js') : path.join(projectConfig.cwd, 'lib', 'index.js'),
        needle: '// buildpoint',
        insertions: [
          projectConfig.options.type === 'project' ? '' : '$vern.controllers.' + params.name + ' = require(\'./' + params.name + '\');',
            '$vern.controllers.' + utils.toCamelCase(options[0], true) + ' = new $vern.controllers.' + params.name + '($vern).init({',
          model ? '  model: $vern.models.' + model + ',' : '',
            '  publicRoute: \'/' + utils.toHyphenated(options[0]) + '\',',
            '  //publicPostRoute: \'/' + utils.toHyphenated(options[0]) + '\',',
            '  //publicDeleteRoute: \'/' + utils.toHyphenated(options[0]) + '\',',
          '});'
        ]
      });

      console.log('');
      console.log(success.green);
      console.log('');
    });
  }

  $scope.buildModel = function(options) {
    var projectConfig = $scope.loadProjectConfig();
    if(!projectConfig) return;

    var params = {
      name: utils.toCamelCase(options[0]) + 'Model',
      path: projectConfig.options.type === 'project' ? path.join(projectConfig.cwd, 'app', projectConfig.options.folders.api, 'models') : path.join(projectConfig.cwd, 'lib'),
      collection: options[0].toLowerCase(),
      indexes: [],
      exclude: [],
      validations: {},
      validation_exceptions: {},
      non_editable: [],
      super_constructor: null
    };

    _model.copy(params, function(err, success) {
      if(err) {
        return console.log(err);
      }

      utils.rewrite({
        path: projectConfig.options.type === 'project' ? path.join(projectConfig.cwd, 'app', projectConfig.options.folders.api, 'server.js') : path.join(projectConfig.cwd, 'lib', 'index.js'),
        needle: '// buildpoint',
        insertions: [
          projectConfig.options.type === 'project' ? '' : '$vern.models.' + params.name + ' = require(\'./' + params.name + '\')($vern);'
        ]
      });

      console.log('');
      console.log(success.green);
      console.log('');
    });
  };

  $scope.buildService = function(options) {
    var projectConfig = $scope.loadProjectConfig();
    if(!projectConfig) return;

    if(options.length < 1) {
      console.log('');
      console.log('You must specify a name'.red);
      console.log('');
      return;
    }

    if(['admin', 'public'].indexOf(options[0].toLowerCase()) <= -1) {
      options.splice(0, 0, 'public');
    }

    options[1] = utils.toHyphenated(options[1]);

    var type = 'service';
    if(options.indexOf('--use-factory') > -1) {
      type = 'factory';
    }
    if(options.indexOf('--use-provider') > -1) {
      type = 'provider';
    }

    var env = options[0] === 'admin' ? projectConfig.options.folders.admin : projectConfig.options.folders.public;

    var name = utils.toCamelCase(options[1], true);

    var params = {
      appName: projectConfig.options.module + (options[0] === 'admin' ? 'AdminApp' : 'App'),
      name: name,
      type: type,
      service_path: path.join(projectConfig.cwd, 'app', env, 'app', 'scripts', 'services')
    };

    _service.copy(params, function(err, success) {
      if(err) {
        return console.log(err);
      }

      utils.rewrite({
        path: path.join(projectConfig.cwd, 'app', env, 'app', 'index.html'),
        needle: '<!-- endbuild -->',
        insertions: [
            '<script type="text/javascript" src="scripts/services/' + params.name + '.js"></script>'
        ]
      });

      console.log('');
      console.log(success.green);
      console.log('');
    });
  };

  $scope.buildDirective = function(options) {
    var projectConfig = $scope.loadProjectConfig();
    if(!projectConfig) return;

    if(options.length < 1) {
      console.log('');
      console.log('You must specify a name'.red);
      console.log('');
      return;
    }

    options[0] = utils.toHyphenated(options[0]);
    options[1] = utils.toHyphenated(options[1]);

    options[0] = options[0].toLowerCase();
    if(['admin', 'public'].indexOf(options[0]) <= -1) {
      options[1] = options[0];
      options[0] = 'public';
    }

    inquirer.prompt([{
      type: 'checkbox',
      name: 'needs',
      message: 'Select directive needs and press ENTER',
      choices: [
        {name: 'Element Restriction', checked: true},
        {name: 'Attribute Restriction', checked: true},
        {name: 'Class Restriction', checked: false},
        {name: 'Isolated Scope', checked: true},
        {name: 'Inherited Scope', checked: false},
        {name: '$templateCache', checked: true},
        {name: 'LESS File', checked: true},
        {name: 'Controller', checked: false}
      ]
    }], function(res) {
      var env = options[0] === 'admin' ? projectConfig.options.folders.admin : projectConfig.options.folders.public;

      var name = options[1].toLowerCase();
      var directive_name = utils.toCamelCase(options[1], true);

      var restrictions = (res.needs.indexOf('Element Restriction') > -1) ? 'E' : '';
      restrictions += (res.needs.indexOf('Attribute Restriction') > -1) ? 'A' : '';
      restrictions += (res.needs.indexOf('Class Restriction') > -1) ? 'C' : '';

      var params = {
        appName: projectConfig.options.module + (options[0] === 'admin' ? 'AdminApp' : 'App'),
        name: name,
        directive_name: directive_name,
        directive_path: path.join(projectConfig.cwd, 'app', env, 'app', 'scripts', 'directives'),
        less_path: path.join(projectConfig.cwd, 'app', env, 'app', 'styles', 'less', 'directives'),
        scope: (res.needs.indexOf('Inherited Scope') > -1),
        restrictions: restrictions,
        templateCache: (res.needs.indexOf('$templateCache') > -1),
        lessFile: (res.needs.indexOf('LESS File') > -1),
        controller: res.needs.indexOf('Controller') > -1
      };

      if(res.needs.indexOf('Isolated Scope') > -1) {
        params.scope = 'scope: {},';
      } else if(params.scope === true) {
        params.scope = 'scope: true,';
      }

      _directive.copy(params, function(err, success) {
        if(err) {
          return console.log(err);
        }

        utils.rewrite({
          path: path.join(projectConfig.cwd, 'app', env, 'app', 'index.html'),
          needle: '<!-- endbuild -->',
          insertions: [
              '<script type="text/javascript" src="scripts/directives/' + params.name + '.js"></script>'
          ]
        });

        if(params.lessFile) {
          utils.rewrite({
            path: path.join(projectConfig.cwd, 'app', env, 'app', 'styles', 'less', 'main.less'),
            needle: '// buildpoint',
            insertions: [
                '@import "directives/' + params.name + '.less";'
            ]
          });
        }

        console.log('');
        console.log(success.green);
        console.log('');
      });
    });
  };

  $scope.buildFilter = function(options) {
    var projectConfig = $scope.loadProjectConfig();
    if(!projectConfig) return;

    if(options.length < 1) {
      console.log('');
      console.log('You must specify a name'.red);
      console.log('');
      return;
    }

    options[0] = utils.toHyphenated(options[0]);
    options[1] = utils.toHyphenated(options[1]);

    options[0] = options[0].toLowerCase();
    if(['admin', 'public'].indexOf(options[0]) <= -1) {
      options[1] = options[0];
      options[0] = 'public';
    }

    var env = options[0] === 'admin' ? projectConfig.options.folders.admin : projectConfig.options.folders.public;

    var name = options[1].toLowerCase();
    var filter_name = utils.toCamelCase(options[1], true);

    var params = {
      appName: projectConfig.options.module + (options[0] === 'admin' ? 'AdminApp' : 'App'),
      name: name,
      filter_name: filter_name,
      filter_path: path.join(projectConfig.cwd, 'app', env, 'app', 'scripts', 'filters')
    };

    _filter.copy(params, function(err, success) {
      if(err) {
        return console.log(err);
      }

      utils.rewrite({
        path: path.join(projectConfig.cwd, 'app', env, 'app', 'index.html'),
        needle: '<!-- endbuild -->',
        insertions: [
            '<script type="text/javascript" src="scripts/filters/' + params.name + '.js"></script>'
        ]
      });

      console.log('');
      console.log(success.green);
      console.log('');
    });
  };

  $scope.buildRoute = function(options, args) {
    if(options.length < 1) {
      console.log('');
      console.log('You must specify a name'.red);
      console.log('');
      return;
    }

    args.build_controller = true;

    $scope.buildView(options, args);
    $scope.buildViewController(options, args);
    $scope.buildStylesheet(options, args);
  };

  $scope.buildView = function(options, args) {
    var projectConfig = $scope.loadProjectConfig();
    if(!projectConfig) return;

    var originalOpts = options.slice(0);

    if(originalOpts.length < 1) {
      console.log('');
      console.log('You must specify a name'.red);
      console.log('');
      return;
    }

    originalOpts[0] = utils.toHyphenated(originalOpts[0]);
    originalOpts[1] = utils.toHyphenated(originalOpts[1]);

    originalOpts[0] = originalOpts[0].toLowerCase();
    if(['admin', 'public'].indexOf(originalOpts[0]) <= -1) {
      originalOpts[1] = originalOpts[0];
      originalOpts[0] = 'public';
    }

    var viewPathParts = originalOpts[1].split(path.sep);
    originalOpts[1] = viewPathParts.pop();

    var env = originalOpts[0] === 'admin' ? projectConfig.options.folders.admin : projectConfig.options.folders.public;

    var extraPath = path.sep + 'main';
    if(env === projectConfig.options.folders.admin) {
      extraPath += path.sep + 'account';
    }
    if(viewPathParts.length) {
      extraPath = path.sep + viewPathParts.join(path.sep);
    }

    if(options.indexOf('--partial') > -1) {
      extraPath = path.sep + 'partials';
    }
    if(options.indexOf('--modal') > -1) {
      extraPath = path.sep + 'modals';
    }
    /*
      Create a view in a path relative to /app/views
     */
    if(options.indexOf('--path') > -1) {
      extraPath = originalOpts[originalOpts.indexOf('--path') + 1];
    }

    if(extraPath.charAt(0) !== path.sep) {
      extraPath = path.sep + extraPath;
    }

    var controller_name = null;
    if(args.build_controller) {
      controller_name = utils.toCamelCase(originalOpts[1]) + 'Ctrl';
    }

    var name = originalOpts[1].toLowerCase();
    var action = 'index';
    if(name.indexOf(':') > -1) {
      var parts = name.split(':');
      name = parts[0];
      action = parts[1];
    }

    var params = {
      appName: projectConfig.options.module + (originalOpts[0] === 'admin' ? 'AdminApp' : 'App'),
      name: name,
      descriptor: utils.toWords(name),
      action: action,
      view_path: path.join(projectConfig.cwd, 'app', env, 'app', 'views', (extraPath + path.sep + name)),
      controller_name: controller_name,
      admin: originalOpts[0] === 'admin'
    };

    _view.copy(params, function(err, success) {
      if(err) {
        return console.log(err);
      }
      console.log('');
      console.log(success.green);
      console.log('');
    });
  };

  $scope.buildViewController = function(options) {
    var projectConfig = $scope.loadProjectConfig();
    if(!projectConfig) return;

    var originalOpts = options.slice(0);

    if(originalOpts.length < 1) {
      console.log('');
      console.log('You must specify a name'.red);
      console.log('');
      return;
    }

    originalOpts[0] = utils.toHyphenated(originalOpts[0]);
    originalOpts[1] = utils.toHyphenated(originalOpts[1]);

    originalOpts[0] = originalOpts[0].toLowerCase();
    if(['admin', 'public'].indexOf(originalOpts[0]) <= -1) {
      originalOpts[1] = originalOpts[0];
      originalOpts[0] = 'public';
    }

    var env = originalOpts[0] === 'admin' ? projectConfig.options.folders.admin : projectConfig.options.folders.public;

    var name = originalOpts[1].toLowerCase();

    var controller_name = utils.toCamelCase(originalOpts[1]) + 'Ctrl';

    var viewPathParts = originalOpts[1].split(path.sep);
    name = viewPathParts.pop();

    var params = {
      appName: projectConfig.options.module + (originalOpts[0] === 'admin' ? 'AdminApp' : 'App'),
      name: name,
      controller_name: controller_name,
      controller_path: path.join(projectConfig.cwd, 'app', env, 'app', 'scripts', 'controllers', viewPathParts.join(path.sep)),
      admin: originalOpts[0] === 'admin'
    };

    _view_controller.copy(params, function(err, success) {
      if(err) {
        return console.log(err);
      }

      utils.rewrite({
        path: path.join(projectConfig.cwd, 'app', env, 'app', 'index.html'),
        needle: '<!-- endbuild -->',
        insertions: [
            '<script type="text/javascript" src="scripts/controllers/' + params.name + '.js"></script>'
        ]
      });

      if(options[0] === 'admin') {
        utils.rewrite({
          path: path.join(projectConfig.cwd, 'app', env, 'app', 'views', 'partials', 'page', 'header.html'),
          needle: '<!-- buildpoint -->',
          insertions: [
            '<md-button class="' + params.name + '" aria-label="' + utils.toWords(name) + '" ng-href="/#!/' + params.name + '" ng-click="closeMenu()">' + utils.toWords(name) + '</md-button>'
          ]
        });
      }

      console.log('');
      console.log(success.green);
      console.log('');
    });
  };

  $scope.buildStylesheet = function(options) {
    var projectConfig = $scope.loadProjectConfig();
    if(!projectConfig) return;

    var originalOpts = options.slice(0);

    if(originalOpts.length < 1) {
      console.log('');
      console.log('You must specify a name'.red);
      console.log('');
      return;
    }

    originalOpts[0] = utils.toHyphenated(originalOpts[0]);
    originalOpts[1] = utils.toHyphenated(originalOpts[1]);

    originalOpts[0] = originalOpts[0].toLowerCase();
    if(['admin', 'public'].indexOf(originalOpts[0]) <= -1) {
      originalOpts[1] = originalOpts[0];
      originalOpts[0] = 'public';
    }

    var viewPathParts = originalOpts[1].split(path.sep);
    originalOpts[1] = viewPathParts.pop();

    var env = originalOpts[0] === 'admin' ? projectConfig.options.folders.admin : projectConfig.options.folders.public;

    var name = originalOpts[1].toLowerCase();

    var controller_name = utils.toCamelCase(name, true);

    var params = {
      appName: projectConfig.options.module + (originalOpts[0] === 'admin' ? 'AdminApp' : 'App'),
      name: name,
      style_path: path.join(projectConfig.cwd, 'app', env, 'app', 'styles', 'less')
    };

    _stylesheet.copy(params, function(err, success) {
      if(err) {
        return console.log(err);
      }

      utils.rewrite({
        path: path.join(projectConfig.cwd, 'app', env, 'app', 'styles', 'less', 'main.less'),
        needle: '// buildpoint',
        insertions: [
            '@import "' + params.name + '.less";'
        ]
      });

      console.log('');
      console.log(success.green);
      console.log('');
    });
  };

  $scope.buildModule = function(options, args) {
    if(options.length < 1) {
      console.log('');
      console.log('You must specify a name'.red);
      console.log('');
      return;
    }

    var newDir = true;
    if(options[0] === '.') {
      options[0] = process.cwd().split('/').slice(-1);
      newDir = false;
    }
    var name = utils.toHyphenated(options[0]);
    var appName = utils.toCamelCase(options[0], true);

    var acceptableTypes = [
      'api',
      'angular'
    ];

    var type = 'angular';
    if(args.type) {
      type = args.type;
    }
    if(acceptableTypes.indexOf(type) === -1) {
      return console.log('Invalid module type'.red);
    }

    var params = {
      newDir: newDir,
      appName: appName,
      name: name,
      type: type,
      module_dir: newDir ? path.join(process.cwd(), name) : process.cwd()
    };

    var startCommands = {
      'api': 'npm install && node examples/test'.green,
      'angular': 'npm install && bower install && grunt server'.green
    };

    _module.copy(params, function(err, success) {
      if(err) {
        return console.log(err.red);
      }

      default_mconfig.module = appName;
      default_mconfig.vern_version = pkg.version;

      fs.outputJsonSync(path.join(params.module_dir, 'vern.json'), default_mconfig);

      console.log('');
      console.log(success.join('\n').green);
      console.log('');
      if(newDir) {
        console.log('Change to your module directory: ' + 'cd '.green + name.green);
      }

      console.log('Start your module, ' + startCommands[type]);
      console.log('');
    });
  };

  return $scope;
}

/*
 *
 * Install functions
 *
 * These methods are used to install npm/bower modules AND vern containers
 *
 * Installs for npm/bower should specify which vern component they are
 * installing to (vern, admin, assets, public)
 *
 */
function parseInstall() {
  var i = process.argv.indexOf('install');
  var params = process.argv.slice(i + 1);

  var installName = params[0];
  installName = installName.charAt(0).toUpperCase() + installName.slice(1).toLowerCase();
  new Installs()['install' + installName](params.slice(1));
}

function parseUninstall() {
  var i = process.argv.indexOf('uninstall');
  var params = process.argv.slice(i + 1);

  var installName = params[0];
  installName = installName.charAt(0).toUpperCase() + installName.slice(1).toLowerCase();
  new Installs()['uninstall' + installName](params.slice(1));
}

function Installs(opts) {
  var $scope = this;

  var cwd = process.cwd();

  function npmCommand(type, options) {
    var projectConfig = new Builds().loadProjectConfig();
    if(!projectConfig) return;

    if(options.length < 1) {
      console.log('');
      console.log('You must specify an environment modules: api, admin, public'.red);
      console.log('');
      return;
    }

    if(['api', 'admin', 'public'].indexOf(options[0]) <= -1) {
      console.log('');
      console.log('You must specify an environment modules: api, admin, public'.red);
      console.log('');
      return;
    }

    var save = '--save';
    if(options.indexOf('--no-save') > -1) {
      save = null;
    }

    var params = [type, options[1], save];
    if(type === 'uninstall' && options.length < 2) {
      console.log('');
      console.log('You must specify a package name: `vern '.red + type.red + ' npm <environment> <package_name>`'.red);
      console.log('');
    } else if(options.length < 2 && type === 'install') {
      options[1] = '';
      params.splice(1, 2);
    }

    var env = options[0] === 'api' ? projectConfig.options.folders.api : (options[0] === 'admin' ? projectConfig.options.folders.admin : projectConfig.options.folders.public);

    var dir = projectConfig.cwd + '/app/' + env;

    var runner = safeSpawn('npm', params, {
      cwd: dir,
      stdio: 'inherit'
    });

    var error = false;
    runner.on('close', function(code) {
      if(error) {
        return;
      }

      if(!options[1].length) {
        options[1] = 'all modules';
      }

      if(code > 0) {
        console.log('');
        console.log('npm ' + type + ' of ' + options[1].red + ' unsuccessful, exit code: ' + code);
        console.log('');
        return;
      }
      console.log('');
      console.log('npm ' + type + ' of ' + options[1].green + ' complete');
      console.log('');
    }).on('error', function(err) {
      error = true;
      console.log('');
      console.log(err.toString().red);
      console.log('');
    });
  }

  function bowerCommand(type, options) {
    var projectConfig = new Builds().loadProjectConfig();
    if(!projectConfig) return;

    if(options.length < 1) {
      console.log('');
      console.log('You must specify an environment modules: admin, public'.red);
      console.log('');
      return;
    }

    if(['admin', 'public'].indexOf(options[0]) <= -1) {
      console.log('');
      console.log('You must specify an environment modules: admin, public'.red);
      console.log('');
      return;
    }

    var save = '--save';
    if(options.indexOf('--no-save') > -1) {
      save = null;
    }

    var params = [type, options[1], save];
    if(type === 'uninstall' && options.length < 2) {
      console.log('');
      console.log('You must specify a package name: `vern '.red + type.red + ' bower <environment> <package_name>`'.red);
      console.log('');
    } else if(options.length < 2 && type === 'install') {
      options[1] = '';
      params.splice(1, 2);
    }

    var env = options[0] === 'admin' ? projectConfig.options.folders.admin : projectConfig.options.folders.public;

    var dir = path.join(projectConfig.cwd, 'app', env);

    var runner = safeSpawn('bower', params, {
      cwd: dir,
      stdio: 'inherit'
    });

    var error = false;
    runner.on('close', function(code) {
      if(error) {
        return;
      }

      if(!options[1]) {
        options[1] = 'all modules';
      }

      if(code > 0) {
        console.log('');
        console.log('bower ' + type + ' of ' + options[1].red + ' unsuccessful, exit code: ' + code);
        console.log('');
        return;
      }
      console.log('');
      console.log('bower ' + type + ' of ' + options[1].green + ' complete');
      console.log('');
    }).on('error', function(err) {
      error = true;
      console.log('');
      console.log(err.toString().red);
      console.log('');
    });
  }

  $scope.installNpm = function(options) {
    npmCommand('install', options);
  };

  $scope.uninstallNpm = function(options) {
    npmCommand('uninstall', options);
  };

  $scope.installBower = function(options) {
    bowerCommand('install', options);
  };

  $scope.uninstallBower = function(options) {
    bowerCommand('uninstall', options);
  };

  $scope.installContainer = function(options) {
    console.log('');
    console.log('Coming soon...');
    console.log('');
  };

  $scope.uninstallContainer = function(params) {
    console.log('');
    console.log('Coming soon...');
    console.log('');
  };

  return $scope;
}

function parseBuild() {
  var i = process.argv.indexOf('build');
  var params = process.argv.slice(i + 1);

  var env = 'public';
  if(params[0]) {
    env = params[0];
  }
  new Distribution()['build' + utils.toCamelCase(env)](params);
}

function Distribution(opts) {
  var $scope = this;
  var projectConfig = new Builds().loadProjectConfig();

  function execBuild(env, dir) {
    var runner = safeSpawn('grunt', ['build'], {
      cwd: dir,
      stdio: 'inherit'
    });

    runner.on('close', function(code) {
      if(code > 0) {
        console.log('');
        console.log('build of ' + env.red + ' unsuccessful, exit code: ' + code);
        console.log('');
        return;
      }
      console.log('');
      console.log('build of ' + env.green + ' complete');
      console.log('');
    }).on('error', function(err) {
      console.log('');
      console.log(err.toString().red);
      console.log('');
    });
  }

  $scope.buildPublic = function(params) {
    if(!projectConfig) return;
    var env = projectConfig.options.folders.public;
    var dir = path.join(projectConfig.cwd, 'app', env);

    if(!fs.existsSync(path.join(dir, 'node_modules'))) {
      new Starter({cwd: projectConfig.cwd}).startPublic(true, true, function (err, success) {
        if(err) {
          return console.log(err);
        }

        execBuild(env, dir);
      });
      return;
    }

    execBuild(env, dir);
  };

  $scope.buildAdmin = function(params) {
    if(!projectConfig) return;
    var env = projectConfig.options.folders.admin;
    var dir = path.join(projectConfig.cwd, 'app', env);

    if(!fs.existsSync(path.join(dir, 'node_modules'))) {
      new Starter({cwd: projectConfig.cwd}).startAdmin(true, true, function (err, success) {
        if(err) {
          return console.log(err);
        }

        execBuild(env, dir);
      });
      return;
    }

    execBuild(env, dir);
  };

  $scope.deploymentSetup = function(params) {

  };

  return $scope;
}

/*
 *
 * Package functions
 *
 * These are used to package containers which can be deployed into a project.
 *
 * Packages can be specified for vern/api, admin, assets, or public projects
 *
 */
function parsePackage() {
  var i = process.argv.indexOf('package');
  var params = process.argv.slice(i + 1);
}

function Packages() {
  var $scope = this;

  return $scope;
}

/*
 * Deploy functions
 *
 * These are used to create deployments, and deploy different stages
 *
 * Configurations built:
 *
 * AWS
 *
 */
function parseDeploy() {
  var i = process.argv.indexOf('deploy');
  var params = process.argv.slice(i + 1);

  var actionName = params[0];

  switch(actionName) {
    case 'setup':
      new Deploy().setup(params);
      break;
    default:
      new Deploy().handleDeployment(params);
      break;
  }
}

function Deploy() {
  var $scope = this;
  var projectConfig = new Builds().loadProjectConfig();

  $scope.setup = function(params) {
    if(!projectConfig) {
      return console.log('Invalid project directory');
    }
    inquirer.prompt([
      {
        type: 'input',
        name: 'environment',
        message: 'Enter an environment name',
        default: 'production'
      },
      {
        type: 'list',
        name: 'infrastructure',
        message: 'Select infrastructure',
        choices: [
          {name: 'Custom Server IP', value: 'custom'},
          {name: 'AWS', value: 'aws'}
        ],
        default: 'custom'
      }
    ], function(answers) {
      var env = answers.environment;
      var inf = answers.infrastructure;

      switch(inf) {
        case 'custom':
          $scope.handleCustomDeploySetup(env);
          break;
        case 'aws':
          $scope.handleAWSDeploySetup(env);
          break;
      }
    });
  };

  $scope.handleCustomDeploySetup = function(env) {
    inquirer.prompt([
      {
        type: 'input',
        name: 'host',
        message: 'Enter the hostname or ip'
      },
      {
        type: 'input',
        name: 'login',
        message: 'Enter the username to access the host'
      },
      {
        type: 'confirm',
        name: 'setup_server',
        message: 'Would you like to set up the server with all necessary software?',
        default: true
      }
    ], function(answers) {
      console.log('Thank you, please make sure you have the ssh key added to your keychain (ssh-add) in order to access the server.');
      console.log(answers);
    });
  };

  $scope.handleAWSDeploySetup = function(env) {
    console.log('You will need your AWS credentials handy to set up the server, but they will not be stored.');
    console.log('');
    inquirer.prompt([
      {
        type: 'input',
        name: 'aws_access_token',
        message: 'Enter your AWS Access Token'
      },
      {
        type: 'input',
        name: 'aws_access_secret',
        message: 'Enter your AWS Access Secret'
      },
      {
        type: 'input',
        name: 'aws_region',
        message: 'Enter your AWS Region',
        default: 'us-east-1'
      },
      {
        type: 'list',
        name: 'key_option',
        message: 'Generate a new Key Pair or use an existing one?',
        choices: [
          {name: 'Generate a Key Pair', value: 'generate'},
          {name: 'Use an existing Key Pair', value: 'existing'},
          //{name: 'Import an RSA key to use', value: 'import'}
        ],
        default: 'generate'
      }
    ], function(answers) {
      /**
       * Work flow:
       *
       * - create Security Group
       * - create or use PEM key
       * - Spin up server
       * - Get details
       * - Allocate IP
       * - Assign IP
       */
      console.log(answers);
    });
  };

  $scope.handleDeployment = function(params) {
    if(!projectConfig) {
      return console.log('Invalid project directory');
    }
    console.log(params);
  };

  return $scope;
}

/*
 * Custom Module functions
 *
 * These methods are used to create custom vern modules
 *
 * Outside of the scope of a project, these modules are mean to be a template for creating vern modules to be added functionality to vern-core or other modules.
 *
 */
function parseModule() {
  var i = process.argv.indexOf('modules');
  var params = process.argv.slice(i + 1);

  var actionName = params[0];
}

function Module() {
  var $scope = this;
  var projectConfig = new Builds().loadProjectConfig();

  $scope.createModule = function(params) {

  };

  return $scope;
}

function parseConfig() {
  console.log('');
  console.log('Configuration methods not built yet'.red);
  console.log('');
}