#!/usr/bin/env node

var program        = require('commander'),
    os             = require('os'),
    fs             = require('fs-extra'),
    exec           = require('child_process').exec,
    prompt         = require('prompt'),
    template_dir   = '../templates',
    _project       = require(template_dir + '/project'),
    _container     = require(template_dir + '/container'),
    _controller    = require(template_dir + '/controller'),
    _model         = require(template_dir + '/model'),
    _directive     = require(template_dir + '/directive'),
    _service       = require(template_dir + '/service'),
    _view          = require(template_dir + '/view'),
    default_config = require(template_dir + '/vern_config.json'),
    pkg            = require('../package.json');

program
  .version(pkg.version)
  .usage('<command> [options]')
  .option('create, --create <object> <options>', 'Create a new module', parseCreate)
  .option('install, --install <module.spec> <options>', 'Install a module into your project', parseInstall)
  .option('package, --pageack <module.spec> <options>', 'Start the package builder', parsePackage)
  .option('deploy, --deploy <stage>', 'Create a view when inside a project folder', deployApp)
  .option('config, --config', 'Configure your app when inside a project folder', configApp)
  .parse(process.argv);

if(process.argv.length <= 2) {
  return console.log('No command given, ' + 'vern -h'.green + ' for usage');
}

function parseCreate(object, options) {
  var i = process.argv.indexOf('create');
  var params = process.argv.slice(i + 1);

  var buildName = params[0];
  buildName = buildName.charAt(0).toUpperCase() + buildName.slice(1).toLowerCase();
  new Builds()['build' + buildName](params.slice(1));
}

function parseInstall(module, options) {
  var i = process.argv.indexOf('install');
  var params = process.argv.slice(i + 1);
}

function parsePackage(module, options) {
  var i = process.argv.indexOf('package');
  var params = process.argv.slice(i + 1);
}

function Builds() {
  var $scope = this;

  $scope.buildProject = function(options) {
    var path = options[0];
    if(!path) {
      path = '.';
    }
    console.log("Setting up VERN now!".green);
    prompt.message = '';
    prompt.start();
    if(fs.existsSync(path)) {
      prompt.get({
        name: 'overwrite',
        message: 'Overwrite the existing directory?',
        validator: /y[es]*|n[o]?/,
        warning: 'Must respond yes or no',
        default: 'no'
      }, function(err, res) {
        if(err) {
          return console.log(err);
        }

        if(res.overwrite.charAt(0) === 'y') {
          copyProject(path);
        } else {
          console.log('Not going to overwrite. Good bye!'.red);
        }
      });
    } else {
      copyProject(path);
    }
  };

  function copyProject(path) {
    _project.copy(path, function(err, res) {
      console.log('Created project in: ' + path.green);
      fs.outputJson(path + '/vern.json', default_config, function(err) {
        if(err) {
          return console.log(err);
        }

        console.log('Created ' + (path + '/vern.json').green);
        // Now we will prompt the user to start adding base routes, controllers, and models.
        // We can also setup a deployment strategy(ies)
      });
    });
  }

  $scope.buildContainer = function(options) {

  };

  $scope.buildController = function(options) {

  };

  $scope.buildService = function(options) {

  };

  $scope.buildDirective = function(options) {

  };

  $scope.buildModel = function(options) {

  };

  $scope.buildView = function(options) {

  };

  return $scope;
}

function deployApp(stage) {

}

function configApp() {

}