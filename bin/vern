#!/usr/bin/env node

var program        = require('commander'),
    os             = require('os'),
    path           = require('path'),
    fs             = require('fs-extra'),
    spawn          = require('child_process').spawn,
    prompt         = require('prompt'),
    template_dir   = '../templates',
    _project       = require(template_dir + '/project'),
    _container     = require(template_dir + '/container'),
    _controller    = require(template_dir + '/controller'),
    _model         = require(template_dir + '/model'),
    _directive     = require(template_dir + '/directive'),
    _service       = require(template_dir + '/service'),
    _filter        = require(template_dir + '/filter'),
    _route         = require(template_dir + '/route'),
    _view          = require(template_dir + '/view'),
    utils          = require('../utils');
    default_config = require(template_dir + '/vern_config.json'),
    pkg            = require('../package.json');

program
  .version(pkg.version)
  .usage('<command> [options]')
  .option('create, --create [object] [options]', 'Create a new module', parseCreate)
  .option('start --start [server]', 'Start a server module (api, frontend, admin)', parseStart)
  .option('stop --stop [server]', 'Stop a server module (api, frontend, admin)', parseStop)
  .option('restart --restart [server]', 'Restart a server module (api, frontend, admin)', parseRestart)
  .option('install, --install [module.spec] [options]', 'Install a module into your project', parseInstall)
  .option('uninstall, --uninstall [module.spec] [options]', 'Uninstall a module from your project', parseUninstall)
  .option('package, --package [module.spec] [options]', 'Start the package builder', parsePackage)
  .option('deploy, --deploy [stage]', 'Create a view when inside a project folder', deployApp)
  .option('config, --config', 'Configure your app when inside a project folder', configApp)
  .parse(process.argv);

prompt.message = '';
prompt.start();

if(process.argv.length <= 2) {
  return console.log('No command given, ' + 'vern -h'.green + ' for usage');
}

/*
 *
 * Starter functions
 *
 * These methods will start the api, admin, and frontend servers for development
 *
 * For a production deployment the process is different, but could be very similar
 *
 */
function parseStart(server) {
  if(!fs.existsSync(process.cwd() + '/vern.json')) {
    console.log('');
    console.log('No ' + 'vern.json'.red + ' found');
    console.log('');
    return;
  }

  var i = process.argv.indexOf('start');
  var params = process.argv.slice(i + 1);
  var projectConfig = require(process.cwd() + '/vern.json');
  switch(server) {
    case 'api':
      new Starter(projectConfig).startAPI(params);
      break;
    case 'frontend':
      new Starter(projectConfig).startFrontend(params);
      break;
    case 'admin':
      new Starter(projectConfig).startAdmin(params);
      break;
    case 'default':
    case 'all':
      new Starter(projectConfig).startAPI(params, function() {
        new Starter(projectConfig).startFrontend(params, function () {
          new Starter(projectConfig).startAdmin(params);
        });
      });
      break;
  }
}

function parseStop(server) {
  if(!fs.existsSync(process.cwd() + '/vern.json')) {
    console.log('');
    console.log('No ' + 'vern.json'.red + ' found');
    console.log('');
    return;
  }
  var projectConfig = require(process.cwd() + '/vern.json');
  switch(server) {
    case 'api':

      break;
    case 'frontend':

      break;
    case 'admin':

      break;
  }
}

function parseRestart(server) {
  if(!fs.existsSync(process.cwd() + '/vern.json')) {
    console.log('');
    console.log('No ' + 'vern.json'.red + ' found');
    console.log('');
    return;
  }
  var projectConfig = require(process.cwd() + '/vern.json');
  switch(server) {
    case 'api':

      break;
    case 'frontend':

      break;
    case 'admin':

      break;
  }
}

function Starter(options) {
  var $scope = this;

  $scope.processes = {
    vern: null,
    admin: null,
    frontend: null
  };

  var project_dirs = {
    vern: '/app/vern',
    admin: '/app/vern_admin',
    assets: '/app/vern_assets',
    frontend: '/app/vern_frontend'
  };

  var cwd = options.cwd || process.cwd();

  $scope.handleRunner = function(task, runner, callback) {
    runner.on('close', function(code) {
      if(code === 0) {
        callback(null, task + ' successful'.green);
      } else {
        callback(task + ' exited with '.red + code.red, null)
      }
    });

    runner.on('error', function(message) {
      console.log('here');
    });
  };

  $scope.runNpm = function(cmd_path, callback) {
    console.log('running npm in ' + cmd_path);
    var runner = spawn('npm', ['install'], {
      cwd: cmd_path,
      stdio: 'inherit'
    });
    $scope.handleRunner('npm install in ' + cmd_path, runner, function(err, success) {
      if (err) {
        return callback(err);
      }

      return callback(null, success);
    });
  };

  $scope.runBower = function(cmd_path, callback) {
    console.log('running bower in ' + cmd_path);
    var runner = spawn('bower', ['install'], {
      cwd: cmd_path,
      stdio: 'inherit'
    });
    $scope.handleRunner('bower install in ' + cmd_path, runner, function(err, success) {
      if (err) {
        return callback(err);
      }

      return callback(null, success);
    });
  };

  $scope.vernExec = function(opts) {
    var env = opts.environment || opts.env || 'development';
    var project = opts.project || 'vern';

    console.log('');
    console.log('starting '.green + project.green + ' ...'.green);
    console.log('');
    $scope.processes[project] = spawn('node', ['server'], {
      cwd: cwd + project_dirs[project],
      stdio: 'inherit'
    });
  };

  $scope.gruntExec = function(opts) {
    var project = opts.project || 'frontend';

    console.log('');
    console.log('starting '.green + project.green + ' ...'.green);
    console.log('');

    $scope.processes[project] = spawn('grunt', ['server'], {
      cwd: cwd + project_dirs[project],
      stdio: 'inherit'
    });
  };

  $scope.startAPI = function(install, nostart, callback) {
    if(arguments.length === 1 && typeof arguments[0] === 'function') {
      callback = arguments[0];
    }
    if(arguments.length === 2 && typeof arguments[1] === 'function') {
      callback = arguments[1];
    }
    if(install === true) {
      $scope.runNpm(cwd + project_dirs['vern'], function(err, success) {
        if(err) {
          return console.log(err);
        }
        console.log(success);
        if(!nostart) {
          $scope.vernExec({project: 'vern', env: 'development'});
        }
        if(callback) {
          callback(null, 'api started');
        }
      });
    } else {
      $scope.vernExec({project: 'vern', env: 'development'});
      if(callback) {
        callback(null, 'api started');
      }
    }
  };

  $scope.startFrontend = function(install, nostart, callback) {
    if(arguments.length === 1 && typeof arguments[0] === 'function') {
      callback = arguments[0];
    }
    if(arguments.length === 2 && typeof arguments[1] === 'function') {
      callback = arguments[1];
    }
    if(install === true) {
      $scope.runNpm(cwd + project_dirs['frontend'], function(err, success) {
        if(err) {
          return console.log(err);
        }

        console.log(success);
        console.log('');
        $scope.runBower(cwd + project_dirs['frontend'], function(err, success) {
          if(err) {
            return console.log(err);
          }

          console.log(success);
          if(!nostart) {
            $scope.gruntExec({project: 'frontend'});
          }
          if(callback) {
            callback(null, 'api started');
          }
        });
      });
    } else {
      $scope.gruntExec({project: 'frontend'});
      if(callback) {
        callback(null, 'api started');
      }
    }
  };

  $scope.startAdmin = function(install, nostart, callback) {
    if(arguments.length === 1 && typeof arguments[0] === 'function') {
      callback = arguments[0];
    }
    if(arguments.length === 2 && typeof arguments[1] === 'function') {
      callback = arguments[1];
    }
    if(install === true) {
      $scope.runNpm(cwd + project_dirs['admin'], function(err, success) {
        if(err) {
          return console.log(err);
        }

        console.log(success);
        console.log('');
        $scope.runBower(cwd + project_dirs['admin'], function(err, success) {
          if(err) {
            return console.log(err);
          }

          console.log(success);
          if(!nostart) {
            $scope.gruntExec({project: 'admin'});
          }
          if(callback) {
            callback(null, 'api started');
          }
        });
      });
    } else {
      $scope.gruntExec({project: 'admin'});
      if(callback) {
        callback(null, 'api started');
      }
    }
  };

  return $scope;
}

/*
 *
 * Build functions
 *
 * These create the necessary templates and configurations for each type of component
 *
 * PROJECT LEVEL
 * ===
 * Project - Set up a complete vern structure
 * Container - Set up a container to be packaged and installed in projects (needs more explanation)
 *
 * API/BACKEND LEVEL
 * ===
 * Controller - Set up a vern route/data controller
 * Model - Set up a vern data model
 *
 * ANGULAR LEVEL (specify admin or frontend)
 * ===
 * View - Sets up an angular view + stylesheet + controller
 * Directive - Sets up an angular directive
 * Service - Sets up an angular service
 * Filter - Sets up an angular filter
 *
 */

function parseCreate() {
  var i = process.argv.indexOf('create');
  var params = process.argv.slice(i + 1);

  var buildName = params[0];
  buildName = buildName.charAt(0).toUpperCase() + buildName.slice(1).toLowerCase();
  new Builds()['build' + buildName](params.slice(1));
}

function Builds() {
  var $scope = this;

  var cwd = process.cwd();

  $scope.buildProject = function(options) {
    var project_path = options[0];
    var project = null;
    if(!project_path) {
      prompt.get({name: 'project', message: 'Enter a project name (use . for current directory):'.green}, function(err, res) {
        build(res.project, res.project);
      });
    } else {
      if(project_path === '.') {
        project = cwd.split('/').pop();
      } else {
        project = project_path.split('/').pop();
      }
      build(project_path, project);
    }

    function build(project_path, project) {
      default_config.module = project;
      console.log('Setting up ' + project.green + ' now!');
      if((fs.existsSync(project_path) && project_path !== '.') || (project_path === '.' && fs.readdirSync(project_path).length > 0)) {
        prompt.get({
          name: 'overwrite',
          message: 'Overwrite the existing directory?',
          validator: /y[es]*|n[o]?/,
          warning: 'Must respond yes or no',
          default: 'no'
        }, function(err, res) {
          if(err) {
            return console.log(err);
          }

          if(res.overwrite.charAt(0) === 'y') {
            copyProject(project_path);
          } else {
            console.log('Not going to overwrite. Good bye!'.red);
          }
        });
      } else {
        copyProject(project_path);
      }
    }
  };

  function copyProject(project_path, project) {
    _project.copy(project_path, function(err, res) {
      console.log('Created project in: ' + project_path.green);
      fs.outputJson(project_path + '/vern.json', default_config, function(err) {
        if(err) {
          return console.log(err);
        }

        console.log('Created ' + (project_path + '/vern.json').green);
        // Now we will prompt the user to start adding base routes, controllers, and models.
        // We can also setup a deployment strategy(ies)
        prompt.get({
          name: 'install',
          message: 'Would you like to install all dependencies now? It will take a few minutes.',
          validator: /y[es]*|n[o]?/,
          warning: 'Must respond yes or no',
          default: 'no'
        }, function(err, res) {
          if(res.install.charAt(0) === 'y') {
            var newCWD = path.join(cwd, project_path);
            new Starter({cwd: newCWD}).startAPI(true, true, function(err, success) {
              if(err) {
                return console.log(err);
              }
              new Starter({cwd: newCWD}).startFrontend(true, true, function (err, success) {
                if(err) {
                  return console.log(err);
                }
                new Starter({cwd: newCWD}).startAdmin(true, true, function (err, success) {
                  if(err) {
                    return console.log(err);
                  }

                  console.log('');
                  console.log('All servers dependencies installed!');
                  console.log('');
                  console.log('To start servers: ' + 'cd '.green + project_path.green);
                  console.log('Then run ' + 'vern start all'.green);
                  console.log('');
                });
              });
            });
          } else {
            console.log('');
            console.log('You can start your servers by running ' + 'vern start all'.green);
            console.log('');
          }
        });
      });
    });
  }

  $scope.loadProjectConfig = function(project_path) {
    if(!project_path) {
      project_path = cwd + '/vern.json';
    }

    var done = false;

    while(!done) {
      if (fs.existsSync(project_path)) {
        cwd = path.dirname(project_path);
        return {options: require(cwd + '/vern.json'), cwd: cwd};
      }
      if(path.dirname(project_path) === '/') {
        done = true;
        continue;
      }
      project_path = path.normalize(path.dirname(project_path) + '/../' + 'vern.json');
    }

    console.log('');
    console.log('No ' + 'vern.json'.red + ' found');
    console.log('');
    return null;
  };

  $scope.buildContainer = function(options) {

  };

  $scope.buildController = function(options) {
    var projectConfig = $scope.loadProjectConfig();
    if(!projectConfig) return;

    var params = {
      name: options[0].charAt(0).toUpperCase() + options[0].slice(1) + 'Controller',
      path: cwd + '/app/vern/controllers'
    };

    _controller.copy(params, function(err, success) {
      if(err) {
        return console.log(err);
      }

      utils.rewrite({
        path: cwd + '/app/vern/server.js',
        needle: '// buildpoint',
        insertions: [
          '$vern.controllers.' + options[0].toLowerCase() + ' = new $vern.controllers.' + params.name + '(scope).init({',
          '  publicRoute: \'/' + options[0].toLowerCase() + '\'',
          '});'
        ]
      });

      console.log('');
      console.log(success.green);
      console.log('');
    });
  };

  $scope.buildService = function(options) {
    var projectConfig = $scope.loadProjectConfig();
    if(!projectConfig) return;

    if(options.length < 2) {
      console.log('');
      console.log('You must specify admin or frontend'.red);
      console.log('');
      return;
    }

    var type = 'service';
    if(options.indexOf('--use-factory') > -1) {
      type = 'factory';
    }
    if(options.indexOf('--use-provider') > -1) {
      type = 'provider';
    }

    options[0] = 'vern_' + options[0];

    var name = options[1].toLowerCase().replace(/[-_](.)/g, function(match, group) {
      return group.toUpperCase();
    });

    var params = {
      name: name,
      type: type,
      service_path: cwd + '/app/' + options[0] + '/app/scripts/services'
    };

    _service.copy(params, function(err, success) {
      if(err) {
        return console.log(err);
      }

      utils.rewrite({
        path: cwd + '/app/' + options[0] + '/app/index.html',
        needle: '<!-- endbuild -->',
        insertions: [
            '<script type="text/javascript" src="scripts/services/' + params.name + '.js"></script>'
        ]
      });

      console.log('');
      console.log(success.green);
      console.log('');
    });
  };

  $scope.buildDirective = function(options) {
    var projectConfig = $scope.loadProjectConfig();
    if(!projectConfig) return;

    if(options.length < 2) {
      console.log('');
      console.log('You must specify admin or frontend'.red);
      console.log('');
      return;
    }

    prompt.get({
      name: 'restrictions',
      message: 'Which restrictions would you like? [AEC] (Default is "A")',
      validator: function(line) {
        return (line.match(/(AEC)/) instanceof Array);
      },
      default: 'A'
    }, function(err, res) {
      if(err) {
        console.log(err.red);
        return;
      }
      options[0] = 'vern_' + options[0];

      var name = options[1].toLowerCase();
      var directive_name = options[1].toLowerCase().replace(/[-_](.)/g, function(match, group) {
        return group.toUpperCase();
      });

      var params = {
        name: name,
        directive_name: directive_name,
        restrictions: res.restrictions.toUpperCase(),
        directive_path: cwd + '/app/' + options[0] + '/app/scripts/directives'
      };

      _directive.copy(params, function(err, success) {
        if(err) {
          return console.log(err);
        }

        utils.rewrite({
          path: cwd + '/app/' + options[0] + '/app/index.html',
          needle: '<!-- endbuild -->',
          insertions: [
              '<script type="text/javascript" src="scripts/directives/' + params.name + '.js"></script>'
          ]
        });

        console.log('');
        console.log(success.green);
        console.log('');
      });
    });
  };

  $scope.buildFilter = function(options) {
    var projectConfig = $scope.loadProjectConfig();
    if(!projectConfig) return;

    if(options.length < 2) {
      console.log('');
      console.log('You must specify admin or frontend'.red);
      console.log('');
      return;
    }

    options[0] = 'vern_' + options[0];

    var name = options[1].toLowerCase();

    var params = {
      name: name,
      filter_path: cwd + '/app/' + options[0] + '/app/scripts/services'
    };

    _filter.copy(params, function(err, success) {
      if(err) {
        return console.log(err);
      }

      utils.rewrite({
        path: cwd + '/app/' + options[0] + '/app/index.html',
        needle: '<!-- endbuild -->',
        insertions: [
            '<script type="text/javascript" src="scripts/filters/' + params.name + '.js"></script>'
        ]
      });

      console.log('');
      console.log(success.green);
      console.log('');
    });
  };

  $scope.buildModel = function(options) {
    var projectConfig = $scope.loadProjectConfig();
    if(!projectConfig) return;

    var params = {
      name: options[0].charAt(0).toUpperCase() + options[0].slice(1) + 'Model',
      path: cwd + '/app/vern/models',
      collection: options[0].toLowerCase(),
      indexes: [],
      exclude: [],
      validations: {},
      validation_exceptions: {},
      non_editable: [],
      super_constructor: null
    };

    _model.copy(params, function(err, success) {
      if(err) {
        return console.log(err);
      }

      console.log('');
      console.log(success.green);
      console.log('');
    });
  };

  $scope.buildRoute = function(options) {
    var projectConfig = $scope.loadProjectConfig();
    if(!projectConfig) return;

    if(options.length < 2) {
      console.log('');
      console.log('You must specify admin or frontend'.red);
      console.log('');
      return;
    }

    options[0] = 'vern_' + options[0];

    var extraPath = '/main';
    if(options.indexOf('--partial') > -1) {
      extraPath = '/partials';
    }
    if(options.indexOf('--modal') > -1) {
      extraPath = '/modals';
    }
    if(options.indexOf('--path') > -1) {
      console.log(options);
      console.log(options.indexOf('--path'));
      extraPath = options[options.indexOf('--path') + 1];
    }

    var name = options[1].toLowerCase();
    var controller_name = options[1].charAt(0).toUpperCase() + options[1].slice(1).toLowerCase().replace(/[-_](.)/g, function(match, group) {
      return group.toUpperCase();
    }) + 'Ctrl';

    var params = {
      name: name,
      controller_name: controller_name,
      view_path: cwd + '/app/' + options[0] + '/app/views' + extraPath + '/' + name,
      style_path: cwd + '/app/' + options[0] + '/app/styles/less',
      controller_path: cwd + '/app/' + options[0] + '/app/scripts/controllers',
      controller: true,
      stylesheet: true
    };

    _route.copy(params, function(err, success) {
      if(err) {
        return console.log(err);
      }

      utils.rewrite({
        path: cwd + '/app/' + options[0] + '/app/index.html',
        needle: '<!-- endbuild -->',
        insertions: [
          '<script type="text/javascript" src="scripts/controllers/' + params.name + '.js"></script>'
        ]
      });

      utils.rewrite({
        path: cwd + '/app/' + options[0] + '/app/styles/less/main.less',
        needle: '// buildpoint',
        insertions: [
          '@import "' + params.name + '.less";'
        ]
      });

      console.log('');
      console.log(success.green);
      console.log('');
    });
  };

  $scope.buildView = function(options) {
    var projectConfig = $scope.loadProjectConfig();
    if(!projectConfig) return;

    if(options.length < 2) {
      console.log('');
      console.log('You must specify admin or frontend'.red);
      console.log('');
      return;
    }

    options[0] = 'vern_' + options[0];

    var extraPath = '/main';
    if(options.indexOf('--partial') > -1) {
      extraPath = '/partials';
    }
    if(options.indexOf('--modal') > -1) {
      extraPath = '/modals';
    }
    if(options.indexOf('--path') > -1) {
      console.log(options);
      console.log(options.indexOf('--path'));
      extraPath = options[options.indexOf('--path') + 1];
    }

    var name = options[1].toLowerCase();

    var params = {
      name: name,
      view_path: cwd + '/app/' + options[0] + '/app/views' + extraPath + '/' + name
    };

    _view.copy(params, function(err, success) {
      if(err) {
        return console.log(err);
      }
      console.log('');
      console.log(success.green);
      console.log('');
    });
  };

  return $scope;
}

/*
 *
 * Install functions
 *
 * These methods are used to install npm/bower modules AND vern containers
 *
 * Installs for npm/bower should specify which vern component they are
 * installing to (vern, admin, assets, frontend)
 *
 */
function parseInstall() {
  var i = process.argv.indexOf('install');
  var params = process.argv.slice(i + 1);

  var installName = params[0];
  installName = installName.charAt(0).toUpperCase() + installName.slice(1).toLowerCase();
  new Installs()['install' + installName](params.slice(1));
}

function parseUninstall() {
  var i = process.argv.indexOf('uninstall');
  var params = process.argv.slice(i + 1);

  var installName = params[0];
  installName = installName.charAt(0).toUpperCase() + installName.slice(1).toLowerCase();
  new Installs()['uninstall' + installName](params.slice(1));
}

function Installs(opts) {
  var $scope = this;

  var cwd = process.cwd();

  function npmCommand(type, options) {
    var projectConfig = new Builds().loadProjectConfig();
    if(!projectConfig) return;

    if(options.length < 2) {
      console.log('');
      console.log('You must specify an environment modules: api, admin, frontend'.red);
      console.log('');
      return;
    }

    var save = '--save';
    if(options.indexOf('--no-save') > -1) {
      save = null;
    }

    var env = options[0] === 'api' ? 'vern' : 'vern_' + options[0];

    var dir = projectConfig.cwd + '/app/' + env;

    var runner = spawn('npm', [type, options[1], save], {
      cwd: dir,
      stdio: 'inherit'
    });

    var error = false;
    runner.on('close', function(code) {
      if(error) {
        return;
      }

      if(code > 0) {
        console.log('');
        console.log('npm ' + type + ' of ' + options[1].red + ' unsuccessful, exit code: ' + code);
        console.log('');
        return;
      }
      console.log('');
      console.log('npm ' + type + ' of ' + options[1].green + ' complete');
      console.log('');
    }).on('error', function(err) {
      error = true;
      console.log('');
      console.log(err.toString().red);
      console.log('');
    });
  }

  function bowerCommand(type, options) {
    var projectConfig = new Builds().loadProjectConfig();
    if(!projectConfig) return;

    if(options.length < 2) {
      console.log('');
      console.log('You must specify an environment modules: admin, frontend'.red);
      console.log('');
      return;
    }

    var save = '--save';
    if(options.indexOf('--no-save') > -1) {
      save = null;
    }

    var env = 'vern_' + options[0];

    var dir = projectConfig.cwd + '/appa/' + env;

    var runner = spawn('bower', [type, options[1], save], {
      cwd: dir,
      stdio: 'inherit'
    });

    var error = false;
    runner.on('close', function(code) {
      if(error) {
        return;
      }

      if(code > 0) {
        console.log('');
        console.log('bower ' + type + ' of ' + options[1].red + ' unsuccessful, exit code: ' + code);
        console.log('');
        return;
      }
      console.log('');
      console.log('bower ' + type + ' of ' + options[1].green + ' complete');
      console.log('');
    }).on('error', function(err) {
      error = true;
      console.log('');
      console.log(err.toString().red);
      console.log('');
    });
  }

  $scope.installNpm = function(options) {
    npmCommand('install', options);
  };

  $scope.uninstallNpm = function(options) {
    npmCommand('uninstall', options);
  };

  $scope.installBower = function(options) {
    bowerCommand('install', options);
  };

  $scope.uninstallBower = function(options) {
    bowerCommand('uninstall', options);
  };

  $scope.installContainer = function(options) {
    console.log('');
    console.log('Coming soon...');
    console.log('');
  };

  $scope.uninstallContainer = function(params) {
    console.log('');
    console.log('Coming soon...');
    console.log('');
  };

  return $scope;
}

/*
 *
 * Package functions
 *
 * These are used to package containers which can be deployed into a project.
 *
 * Packages can be specified for vern/api, admin, assets, or frontend projects
 *
 */
function parsePackage() {
  var i = process.argv.indexOf('package');
  var params = process.argv.slice(i + 1);
}

function Packages() {
  var $scope = this;

  return $scope;
}

function deployApp(stage) {
  console.log('');
  console.log('Upgrade to enterprise for access to deployment services'.red);
  console.log('');
}

function configApp() {

}