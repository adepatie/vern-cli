#!/usr/bin/env node

var program        = require('commander'),
    os             = require('os'),
    fs             = require('fs-extra'),
    exec           = require('child_process').exec,
    prompt         = require('prompt'),
    template_dir   = '../templates',
    _project       = require(template_dir + '/project'),
    _container     = require(template_dir + '/container'),
    _controller    = require(template_dir + '/controller'),
    _model         = require(template_dir + '/model'),
    _directive     = require(template_dir + '/directive'),
    _service       = require(template_dir + '/service'),
    _view          = require(template_dir + '/view'),
    default_config = require(template_dir + '/vern_config.json'),
    pkg            = require('../package.json');

program
  .version(pkg.version)
  .usage('[command] [options]')
  .option('project, --project <path>', 'Create a new project', buildProject)
  .option('container, --container <path>', 'Create a new container', buildContainer)
  .option('controller, --controller <name>', 'Create a controller when inside a project folder', buildController)
  .option('model, --model <name>', 'Create a model when inside a project folder', buildModel)
  .option('service, --service <path>', 'Create a service when inside a project folder', buildService)
  .option('directive, --directive <path>', 'Create a service when inside a project folder', buildDirective)
  .option('view, --view <name>', 'Create a view when inside a project folder', buildView)
  .option('deploy, --deploy <stage>', 'Create a view when inside a project folder', deployApp)
  .option('config, --config', 'Configure your app when inside a project folder', configApp)
  .parse(process.argv);

function buildProject(path, overwrite) {
  if(!path) {
    path = '.';
  }
  console.log("Setting up VERN now!".green);
  prompt.message = '';
  prompt.start();
  if(fs.existsSync(path)) {
    prompt.get({
      name: 'overwrite',
      message: 'Overwrite the existing directory?',
      validator: /y[es]*|n[o]?/,
      warning: 'Must respond yes or no',
      default: 'no'
    }, function(err, res) {
      if(err) {
        return console.log(err);
      }

      if(res.overwrite.charAt(0) === 'y') {
        copyProject(path);
      } else {
        console.log('Not going to overwrite. Good bye!'.red);
      }
    });
  } else {
    copyProject(path);
  }
}

function copyProject(path) {
  _project.copy(path, function(err, res) {
    console.log('Created project in: ' + path.green);
    fs.outputJson(path + '/vern.json', default_config, function(err) {
      if(err) {
        return console.log(err);
      }

      console.log('Created ' + (path + '/vern.json').green);
      // Now we will prompt the user to start adding base routes, controllers, and models.
      // We can also setup a deployment strategy(ies)
    });
  });
}

function buildContainer(path) {

}

function buildController(name) {

}

function buildService(path) {

}

function buildDirective(path) {

}

function buildModel(name) {

}

function buildView(name) {

}

function deployApp(stage) {

}

function configApp() {

}