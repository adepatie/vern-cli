#!/usr/bin/env node

var program        = require('commander'),
    os             = require('os'),
    fs             = require('fs-extra'),
    spawn          = require('child_process').spawn,
    prompt         = require('prompt'),
    template_dir   = '../templates',
    _project       = require(template_dir + '/project'),
    _container     = require(template_dir + '/container'),
    _controller    = require(template_dir + '/controller'),
    _model         = require(template_dir + '/model'),
    _directive     = require(template_dir + '/directive'),
    _service       = require(template_dir + '/service'),
    _view          = require(template_dir + '/view'),
    default_config = require(template_dir + '/vern_config.json'),
    pkg            = require('../package.json');

program
  .version(pkg.version)
  .usage('<command> [options]')
  .option('create, --create [object] [options]', 'Create a new module', parseCreate)
  .option('start --start [server]', 'Start a server module (api, frontend, admin)', parseStart)
  .option('stop --stop [server]', 'Stop a server module (api, frontend, admin)', parseStop)
  .option('restart --restart [server]', 'Restart a server module (api, frontend, admin)', parseRestart)
  .option('install, --install [module.spec] [options]', 'Install a module into your project', parseInstall)
  .option('package, --package [module.spec] [options]', 'Start the package builder', parsePackage)
  .option('deploy, --deploy [stage]', 'Create a view when inside a project folder', deployApp)
  .option('config, --config', 'Configure your app when inside a project folder', configApp)
  .parse(process.argv);

prompt.message = '';
prompt.start();

if(process.argv.length <= 2) {
  return console.log('No command given, ' + 'vern -h'.green + ' for usage');
}

function parseCreate() {
  var i = process.argv.indexOf('create');
  var params = process.argv.slice(i + 1);

  var buildName = params[0];
  buildName = buildName.charAt(0).toUpperCase() + buildName.slice(1).toLowerCase();
  new Builds()['build' + buildName](params.slice(1));
}

function parseStart(server) {
  if(!fs.existsSync(process.cwd() + '/vern.json')) {
    console.log('');
    console.log('No ' + 'vern.json'.red + ' found');
    console.log('');
    return;
  }

  function handleRunner(task, runner, callback) {
    runner.on('close', function(code) {
      if(code === 0) {
        callback(null, task + ' successful'.green);
      } else {
        callback(task + ' exited with '.red + code.red, null)
      }
    });
  }

  function startAPI() {
    var runner = spawn('npm', ['install'], {
      cwd: process.cwd() + '/app/vern',
      stdio: 'inherit'
    });
    handleRunner('npm install', runner, function(err, success) {
      if(err) {
        return console.log(err);
      }
      console.log(success);
      console.log('');
      console.log('starting server ...'.green);
      console.log('');
      runner = spawn('node', ['server'], {
        cwd: process.cwd() + '/app/vern',
        stdio: 'inherit'
      });
    });
  }

  function startFrontend() {
    var runner = spawn('npm', ['install'], {
      cwd: process.cwd() + '/app/vern_frontend',
      stdio: 'inherit'
    });
    handleRunner('npm install', runner, function(err, success) {
      if(err) {
        return console.log(err);
      }
      console.log(success);
      console.log('');
      var runner = spawn('bower', ['install'], {
        cwd: process.cwd() + '/app/vern_frontend',
        stdio: 'inherit'
      });
      handleRunner('bower install', runner, function(err, success) {
        if(err) {
          return console.log(err);
        }
        console.log(success);
        console.log('');
        console.log('starting server ...'.green);
        console.log('');
        runner = spawn('grunt', ['server'], {
          cwd: process.cwd() + '/app/vern_frontend',
          stdio: 'inherit'
        });
      })
    });
  }

  function startAdmin() {
    var runner = spawn('npm', ['install'], {
      cwd: process.cwd() + '/app/vern_admin',
      stdio: 'inherit'
    });
    handleRunner('npm install', runner, function(err, success) {
      if(err) {
        return console.log(err);
      }
      console.log(success);
      console.log('');
      var runner = spawn('bower', ['install'], {
        cwd: process.cwd() + '/app/vern_admin',
        stdio: 'inherit'
      });
      handleRunner('bower install', runner, function(err, success) {
        if(err) {
          return console.log(err);
        }
        console.log(success);
        console.log('');
        console.log('starting server ...'.green);
        console.log('');
        runner = spawn('grunt', ['server'], {
          cwd: process.cwd() + '/app/vern_admin',
          stdio: 'inherit'
        });
      })
    });
  }

  var projectConfig = require(process.cwd() + '/vern.json');
  switch(server) {
    case 'api':
      startAPI();
      break;
    case 'frontend':
      startFrontend();
      break;
    case 'admin':
      startAdmin();
    case 'default':
    case 'all':
      startAPI();
      startFrontend();
      startAdmin();
      break;
  }
}

function parseStop(server) {
  if(!fs.existsSync(process.cwd() + '/vern.json')) {
    console.log('');
    console.log('No ' + 'vern.json'.red + ' found');
    console.log('');
    return;
  }
  var projectConfig = require(process.cwd() + '/vern.json');
  switch(server) {
    case 'api':

      break;
    case 'frontend':

      break;
    case 'admin':

      break;
  }
}

function parseRestart(server) {
  if(!fs.existsSync(process.cwd() + '/vern.json')) {
    console.log('');
    console.log('No ' + 'vern.json'.red + ' found');
    console.log('');
    return;
  }
  var projectConfig = require(process.cwd() + '/vern.json');
  switch(server) {
    case 'api':

      break;
    case 'frontend':

      break;
    case 'admin':

      break;
  }
}

function parseInstall() {
  var i = process.argv.indexOf('install');
  var params = process.argv.slice(i + 1);
}

function parsePackage() {
  var i = process.argv.indexOf('package');
  var params = process.argv.slice(i + 1);
}

function Builds() {
  var $scope = this;

  $scope.buildProject = function(options) {
    var path = options[0];
    var project = null;
    if(!path) {
      prompt.get({name: 'project', message: 'Enter a project name (use . for current directory):'.green}, function() {
        build(project, project);
      });
    } else {
      if(path === '.') {
        project = process.cwd().split('/').pop();
      } else {
        project = path.split('/').pop();
      }
      build(path, project);
    }

    function build(path, project) {
      default_config.module = project;
      console.log('Setting up ' + project.green + ' now!');
      if(fs.existsSync(path)) {
        prompt.get({
          name: 'overwrite',
          message: 'Overwrite the existing directory?',
          validator: /y[es]*|n[o]?/,
          warning: 'Must respond yes or no',
          default: 'no'
        }, function(err, res) {
          if(err) {
            return console.log(err);
          }

          if(res.overwrite.charAt(0) === 'y') {
            copyProject(path);
          } else {
            console.log('Not going to overwrite. Good bye!'.red);
          }
        });
      } else {
        copyProject(path);
      }
    }
  };

  function copyProject(path, project) {
    _project.copy(path, function(err, res) {
      console.log('Created project in: ' + path.green);
      fs.outputJson(path + '/vern.json', default_config, function(err) {
        if(err) {
          return console.log(err);
        }

        console.log('Created ' + (path + '/vern.json').green);
        // Now we will prompt the user to start adding base routes, controllers, and models.
        // We can also setup a deployment strategy(ies)
      });
    });
  }

  $scope.buildContainer = function(options) {

  };

  $scope.buildController = function(options) {
    if(!fs.existsSync(process.cwd() + '/vern.json')) {
      console.log('');
      console.log('No ' + 'vern.json'.red + ' found');
      console.log('');
      return;
    }
    var projectConfig = require(process.cwd() + '/vern.json');
    console.log(projectConfig);
  };

  $scope.buildService = function(options) {
    if(!fs.existsSync(process.cwd() + '/vern.json')) {
      console.log('');
      console.log('No ' + 'vern.json'.red + ' found');
      console.log('');
      return;
    }
    var projectConfig = require(process.cwd() + '/vern.json');
    console.log(projectConfig);
  };

  $scope.buildDirective = function(options) {
    if(!fs.existsSync(process.cwd() + '/vern.json')) {
      console.log('');
      console.log('No ' + 'vern.json'.red + ' found');
      console.log('');
      return;
    }
    var projectConfig = require(process.cwd() + '/vern.json');
    console.log(projectConfig);
  };

  $scope.buildModel = function(options) {
    if(!fs.existsSync(process.cwd() + '/vern.json')) {
      console.log('');
      console.log('No ' + 'vern.json'.red + ' found');
      console.log('');
      return;
    }
    var projectConfig = require(process.cwd() + '/vern.json');
    console.log(projectConfig);
  };

  $scope.buildView = function(options) {
    if(!fs.existsSync(process.cwd() + '/vern.json')) {
      console.log('');
      console.log('No ' + 'vern.json'.red + ' found');
      console.log('');
      return;
    }
    var projectConfig = require(process.cwd() + '/vern.json');
    console.log(projectConfig);
  };

  return $scope;
}

function Installs() {
  var $scope = this;

  return $scope;
}

function Packages() {
  var $scope = this;

  return $scope;
}

function deployApp(stage) {
  console.log('');
  console.log('Upgrade to enterprise for access to deployment services'.red);
  console.log('');
}

function configApp() {

}